include:
  - project: "waldur/waldur-pipelines"
    file: "/templates/stages.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/test/python-linters.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/test/python-tests.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/sbom/generate-python-codebase-sbom.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/sbom/upload-sboms-to-docs.yml"

.Run tests template:
  stage: test
  interruptible: true
  rules:
    # Skip tests if specified
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    # If tagged release
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
    # If event is related to a created merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - plugins/**/*
        - tests/**/*
        - pyproject.toml
        - waldur_site_agent/**/*
        - uv.lock
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    when: always
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  script:
    - pip install uv
    - uv sync --all-packages
    - source .venv/bin/activate
    - pytest --junitxml=report.xml plugins/ tests/
    - coverage xml
    - coverage report

Run python v3.9 linters:
  image: "registry.hpc.ut.ee/mirror/library/python:3.9"
  extends: .Run linters template
  before_script:
    - |
      echo 'default_language_version:' >> .pre-commit-config.yaml
      echo '  python: python3.9' >> .pre-commit-config.yaml
    - cat .pre-commit-config.yaml

Run python v3.10 linters:
  image: "registry.hpc.ut.ee/mirror/library/python:3.10"
  extends: .Run linters template
  before_script:
    - |
      echo 'default_language_version:' >> .pre-commit-config.yaml
      echo '  python: python3.10' >> .pre-commit-config.yaml
    - cat .pre-commit-config.yaml

Run python v3.11 linters:
  image: "registry.hpc.ut.ee/mirror/library/python:3.11"
  extends: .Run linters template
  before_script:
    - |
      echo 'default_language_version:' >> .pre-commit-config.yaml
      echo '  python: python3.11' >> .pre-commit-config.yaml
    - cat .pre-commit-config.yaml

Run python v3.12 linters:
  image: "registry.hpc.ut.ee/mirror/library/python:3.12"
  extends: .Run linters template
  before_script:
    - |
      echo 'default_language_version:' >> .pre-commit-config.yaml
      echo '  python: python3.12' >> .pre-commit-config.yaml
    - cat .pre-commit-config.yaml

Run python v3.13 linters:
  image: "registry.hpc.ut.ee/mirror/library/python:3.13"
  extends: .Run linters template
  before_script:
    - |
      echo 'default_language_version:' >> .pre-commit-config.yaml
      echo '  python: python3.13' >> .pre-commit-config.yaml
    - cat .pre-commit-config.yaml

.Test template:
  extends: .Run tests template
  before_script:
  - cp examples/waldur-site-agent-config.yaml.example ./waldur-site-agent-config.yaml


Run python v3.9 tests:
  image: "registry.hpc.ut.ee/mirror/library/python:3.9"
  extends: .Test template

Run python v3.10 tests:
  image: "registry.hpc.ut.ee/mirror/library/python:3.10"
  extends: .Test template

Run python v3.11 tests:
  image: "registry.hpc.ut.ee/mirror/library/python:3.11"
  extends: .Test template

Run python v3.12 tests:
  image: "registry.hpc.ut.ee/mirror/library/python:3.12"
  extends: .Test template

Run python v3.13 tests:
  image: "registry.hpc.ut.ee/mirror/library/python:3.13"
  extends: .Test template


.Generate Codebase SBOM template:
  image:
    name: "registry.hpc.ut.ee/mirror/library/python:3.11-bullseye"
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
  before_script:
    - apt-get update
  script:
    - pip install uv
    - uv sync --all-packages
    - uv pip install cyclonedx-bom
    - uv run cyclonedx-py environment "$(which python )" -o ${PROJECT_NAME}-${CI_COMMIT_TAG}-source.cyclonedx.json
    - echo "SBOM generated. Size:"
    - du -h ${PROJECT_NAME}-${CI_COMMIT_TAG}-source.cyclonedx.json
    - tar -czf ${PROJECT_NAME}-${CI_COMMIT_TAG}-source.cyclonedx.tar.gz ${PROJECT_NAME}-${CI_COMMIT_TAG}-source.cyclonedx.json
    - echo "SBOM archived. Size:"
    - du -h ${PROJECT_NAME}-${CI_COMMIT_TAG}-source.cyclonedx.tar.gz
  artifacts:
    paths:
      - ${PROJECT_NAME}-${CI_COMMIT_TAG}-source.cyclonedx.tar.gz
    expire_in: 1 day

Generate Codebase SBOM:
  extends: .Generate Codebase SBOM template
  variables:
    PROJECT_NAME: "waldur-site-agent"

Upload Source SBOM:
  extends: .Upload SBOM template
  needs:
    - Generate Codebase SBOM
  variables:
    PROJECT_NAME: "waldur-site-agent"
    SBOM_TYPE: "source"
    SBOM_DIR: "source"

Upload docs:
  image:
    name: registry.hpc.ut.ee/mirror/alpine/git:v2.30.2
    entrypoint: [""]
  stage: deploy
  interruptible: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "schedule"'
  script:
    - cd /tmp/
    - git clone "https://gitlab-ci-token:$GITLAB_TOKEN@$CI_SERVER_HOST/waldur/waldur-docs.git"
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - cd waldur-docs/
    - ls docs/admin-guide/providers/
    - cp -v $CI_PROJECT_DIR/README.md docs/admin-guide/providers/waldur-site-agent.md
    - mkdir docs/admin-guide/providers/examples || true
    - cp -rv $CI_PROJECT_DIR/examples/* docs/admin-guide/providers/examples/
    - mkdir docs/admin-guide/providers/systemd-conf/ || true
    - cp -rv $CI_PROJECT_DIR/systemd-conf/* docs/admin-guide/providers/systemd-conf/
    - mkdir docs/admin-guide/providers/docs || true
    - cp -rv $CI_PROJECT_DIR/docs/* docs/admin-guide/providers/docs/
    - git add docs/admin-guide/providers/
    - git commit -m 'Update Waldur Site Agent docs' || exit 0
    - git branch new-site-agent-docs
    - git push --set-upstream origin new-site-agent-docs:master

Publish python module tagged release with uv:
  image: ghcr.io/astral-sh/uv:python3.13-alpine
  stage: release
  interruptible: true
  variables:
    UV_PUBLISH_USERNAME: $PYPI_USERNAME
    UV_PUBLISH_PASSWORD: $PYPI_PASSWORD
  rules:
    - if: $CI_COMMIT_TAG
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
  script:
    - sed -i "s/^version = \".*\"$/version = \"$CI_COMMIT_TAG\"/" pyproject.toml
    - sed -i "s/^version = \".*\"$/version = \"$CI_COMMIT_TAG\"/" plugins/slurm/pyproject.toml
    - sed -i "s/^    \"waldur-site-agent==.*\"$/    \"waldur-site-agent==$CI_COMMIT_TAG\"/" plugins/slurm/pyproject.toml
    - sed -i "s/^version = \".*\"$/version = \"$CI_COMMIT_TAG\"/" plugins/moab/pyproject.toml
    - sed -i "s/^    \"waldur-site-agent==.*\"$/    \"waldur-site-agent==$CI_COMMIT_TAG\"/" plugins/moab/pyproject.toml
    - sed -i "s/^version = \".*\"$/version = \"$CI_COMMIT_TAG\"/" plugins/mup/pyproject.toml
    - sed -i "s/^    \"waldur-site-agent==.*\"$/    \"waldur-site-agent==$CI_COMMIT_TAG\"/" plugins/mup/pyproject.toml
    - sed -i "s/^version = \".*\"$/version = \"$CI_COMMIT_TAG\"/" plugins/basic_username_management/pyproject.toml
    - sed -i "s/^    \"waldur-site-agent==.*\"$/    \"waldur-site-agent==$CI_COMMIT_TAG\"/" plugins/basic_username_management/pyproject.toml
    - uv build --all-packages
    - uv publish


Publish multiarch latest docker image template:
  stage: release
  interruptible: true
  image: registry.hpc.ut.ee/mirror/docker:latest
  services:
    - name: public.ecr.aws/docker/library/docker:dind
      command: ["--mtu=1400"]
      alias: docker
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  before_script:
    - apk update
    - apk add --no-cache gcc python3-dev musl-dev linux-headers openldap-dev openssl libffi-dev libjpeg-turbo-dev libxml2-dev libxslt-dev
    - echo "$WALDUR_DOCKER_HUB_PASSWORD" | docker login $DOCKER_HUB_REGISTRY --username "$WALDUR_DOCKER_HUB_USER" --password-stdin
  script:
    - docker context create builder
    - docker buildx version
    - docker buildx create builder --use
    - docker buildx build --platform linux/amd64,linux/arm64 --build-arg DOCKER_REGISTRY=${DOCKER_REGISTRY} -f Dockerfile.waldur-storage-proxy -t opennode/waldur-cscs-storage-proxy:latest --push .
